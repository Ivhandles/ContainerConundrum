trigger: 
  branches:
    include:
      - "azure-pipelines"

variables: 
  ACR_NAME: 'ivoyantacr'
  ACR_RESOURCE_GROUP: 'Ivoyant-ACR'
  DOCKERFILE_PATH_UI: './cc-ui/Dockerfile'
  DOCKERFILE_PATH_API: './CC_api/Dockerfile'
  UI_APP_SERVICE_NAME: 'ccappui'
  API_APP_SERVICE_NAME: 'ccappapi'

stages:
  - stage: Build
    displayName: 'Build and Push Docker Images'
    jobs:
      - job: Build_UI
        displayName: 'Build UI Docker Image'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
          - task: Docker@2
            displayName: 'Build UI Docker Image'
            inputs:
              containerRegistry: 'containerregistry-ui'
              repository: '$(ACR_NAME)/cc_ui'
              command: 'build'
              Dockerfile: '$(DOCKERFILE_PATH_UI)'
              tags: '$(Build.BuildId)'
          - task: Docker@2
            inputs:
              containerRegistry: 'containerregistry-ui'
              repository: '$(ACR_NAME)/cc_ui'
              command: push
              Dockerfile: '$(DOCKERFILE_PATH_UI)'
              tags: '$(Build.BuildId)'
            displayName: Push UI Docker Image
            env:
              BUILD_SOURCEBRANCHNAME: '$(Build.SourceBranchName)'
              BUILD_BUILDID: '$(Build.BuildId)'

      - job: Build_API
        displayName: 'Build API Docker Image'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
          - task: Docker@2
            displayName: 'Build API Docker Image'
            inputs:
              containerRegistry: 'containerregistry-api'
              repository: '$(ACR_NAME)/cc_api'
              command: 'build'
              Dockerfile: '$(DOCKERFILE_PATH_API)'
              tags: '$(Build.BuildId)'
          - task: Docker@2
            inputs:
              containerRegistry: 'containerregistry-api'
              repository: '$(ACR_NAME)/cc_api'
              command: push
              Dockerfile: '$(DOCKERFILE_PATH_API)'
              tags: '$(Build.BuildId)'
            displayName: Push API Docker Image
            env:
              BUILD_SOURCEBRANCHNAME: '$(Build.SourceBranchName)'
              BUILD_BUILDID: '$(Build.BuildId)'

  - stage: Deploy
    displayName: 'Deploy to Azure App Service'
    dependsOn: Build
    jobs:
      - job: Deploy_UI
        displayName: 'Deploy UI to Azure App Service'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - download: current
            artifact: docker-image
            displayName: Download UI Docker Image Artifact

          - task: AzureRmWebAppDeployment@4
            displayName: 'Azure App Service Deploy'
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'ccazportal-appservice-connection'
              appType: 'webApp'
              WebAppName: '$(UI_APP_SERVICE_NAME)'
              packageForLinux: '$(Pipeline.Workspace)/docker-image/cc_ui:$(BUILD_BUILDID)'

      - job: Deploy_API
        displayName: 'Deploy API to Azure App Service'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - download: current
            artifact: docker-image
            displayName: Download API Docker Image Artifact

          - task: AzureRmWebAppDeployment@4
            displayName: 'Azure App Service Deploy'
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'ccazportal-appservice-connection'
              appType: 'webApp'
              WebAppName: '$(API_APP_SERVICE_NAME)'
              packageForLinux: '$(Pipeline.Workspace)/docker-image/cc_api:$(BUILD_BUILDID)'
